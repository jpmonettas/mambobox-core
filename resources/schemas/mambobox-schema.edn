{:mambobox/schema
 {:txes 
  [;; Reified txs
   [{:db/id #db/id[:db.part/db]
     :db/ident :mb.tx/user
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db/doc "The user who is making this transaction"
     :db.install/_attribute :db.part/db}]
   
   ;; Artists
   [{:db/id #db/id[:db.part/db]
     :db/ident :mb.artist/name
     :db/fulltext true
     :db/unique :db.unique/identity
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The artist/group name"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.artist/albums
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/many
     :db/doc "The artist/group albums"
     :db.install/_attribute :db.part/db}]


   ;; Albums
   [{:db/id #db/id[:db.part/db]
     :db/ident :mb.album/name
     :db/fulltext true
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The album name"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.album/songs
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/many
     :db/doc "The album songs"
     :db.install/_attribute :db.part/db}]
   
   ;; Songs
   [{:db/id #db/id[:db.part/db]
     :db/ident :mb.song/name
     :db/fulltext true
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "A song name"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.song/file-id
     :db/unique :db.unique/identity
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "Mambobox file id of the song"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.song/year
     :db/valueType :db.type/long
     :db/cardinality :db.cardinality/one
     :db/doc "The year of the song"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.song/plays-count
     :db/noHistory true
     :db/valueType :db.type/long
     :db/cardinality :db.cardinality/one
     :db/doc "The number of time a song has been played"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.song/tags
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/many
     :db/doc "Song tags"
     :db.install/_attribute :db.part/db}]

   ;; Users
   [{:db/id #db/id[:db.part/db]
     :db/ident :mb.user/fullname
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The user full name"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.user/email
     :db/unique :db.unique/identity
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The user email"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.user/nick
     :db/unique :db.unique/identity
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The user nickname"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.user/devices
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/many
     :db/doc "The user devices"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.user/favourite-songs
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/many
     :db/doc "The user favourite songs"
     :db.install/_attribute :db.part/db}]

   ;; Devices
   [{:db/id #db/id[:db.part/db]
     :db/ident :mb.device/uniq-id
     :db/valueType :db.type/string
     :db/unique :db.unique/identity
     :db/cardinality :db.cardinality/one
     :db/doc "The device uniq id"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.device/locale
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The device locale"
     :db.install/_attribute :db.part/db}
    {:db/id #db/id[:db.part/db]
     :db/ident :mb.device/country
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The device country"
     :db.install/_attribute :db.part/db}]
   ]}

 
 :mambobox/db-fns
 {:txes [[;; Add an artist
          {:db/id #db/id[:db.part/user]
           :db/ident :artist/add
           :db/fn #db/fn {:lang :clojure
                          :params [db id artist-name]
                          :code [{:db/id id
                                  :mb.artist/name artist-name}]}}

          ;; Retract an artist
          {:db/id #db/id[:db.part/user]
           :db/ident :artist/retract
           :db/fn #db/fn {:lang :clojure
                          :params [db id]
                          :code (if-not (empty? (:mb.artist/albums (d/entity db id)))
                                  (throw (ex-info "Artist still has albums"
                                                  {:type :non-empty-artist-error}))
                                  [[:db.fn/retractEntity id]])}}

          
          ;; Add an album
          {:db/id #db/id[:db.part/user]
           :db/ident :album/add
           :db/fn #db/fn {:lang :clojure
                          :params [db album-id artist-id album-name]
                          :code (let [artist-album (ffirst (d/q '[:find ?album-id
                                                                  :in $ ?artist-id ?album-name
                                                                  :where
                                                                  [?artist-id :mb.artist/albums ?album-id]
                                                                  [?album-id :mb.album/name ?album-name]]
                                                                db
                                                                artist-id
                                                                album-name))]
                                  (if artist-album
                                    (throw (ex-info (format "There is already an album called %s for artist %s" album-name artist-id)
                                                    {:type :duplicate-album-error}))
                                    [[:db/add album-id :mb.album/name album-name]
                                     [:db/add artist-id :mb.artist/albums album-id]]))}}

          ;; Retract an album
          {:db/id #db/id[:db.part/user]
           :db/ident :album/retract
           :db/fn #db/fn {:lang :clojure
                          :params [db id]
                          :code (if-not (empty? (:mb.album/songs (d/entity db id)))
                                  (throw (ex-info "Album still have songs"
                                                  {:type :non-empty-album-error}))
                                  [[:db.fn/retractEntity id]])}}


          ;; Add a song
          {:db/id #db/id[:db.part/user]
           :db/ident :song/add
           :db/fn #db/fn {:lang :clojure
                          :params [db song-id song-file-id song-name song-year album-id]
                          :code (let [album (d/entity db album-id)]
                                  (if (not-empty (filter (fn [s] (= song-name (:mb.song/name s)))
                                                         (:mb.album/songs album)))
                                    (throw (ex-info (format "Already a song called %s for album %s " song-name album-id)
                                                    {:type :duplicate-song-error}))
                                    (cond-> [{:db/id song-id
                                              :mb.song/name song-name 
                                              :mb.song/file-id song-file-id
                                              :mb.song/plays-count 0}
                                             [:db/add album-id :mb.album/songs song-id]]
                                      song-year (conj [:db/add song-id :mb.song/year song-year]))))}}

          ;; Track a song view
          {:db/id #db/id[:db.part/user]
           :db/ident :song/track-play
           :db/fn #db/fn {:lang :clojure
                          :params [db song-id ]
                          :code (let [song (d/entity db song-id)]
                                  [[:db/add song-id :mb.song/plays-count (inc (:mb.song/plays-count song))]])}}

          ;; Add a user
          {:db/id #db/id[:db.part/user]
           :db/ident :user/add
           :db/fn #db/fn {:lang :clojure
                          :params [db id email full-name nick]
                          :code [{:db/id id
                                  :mb.user/email email
                                  :mb.user/fullname full-name
                                  :mb.user/nick nick}]}}

          ;; Add a device
          {:db/id #db/id[:db.part/user]
           :db/ident :device/add
           :db/fn #db/fn {:lang :clojure
                          :params [db id uniq-id locale country user-id]
                          :code (if (d/entity db [:mb.device/uniq-id uniq-id])
                                  (throw (ex-info (str "There is already a device identified by " uniq-id)
                                                  {:type :duplicate-device-error}))
                                  [{:db/id id
                                    :mb.device/uniq-id uniq-id
                                    :mb.device/country country
                                    :mb.device/locale locale}
                                   [:db/add user-id :mb.user/devices id]])}}]]}}
